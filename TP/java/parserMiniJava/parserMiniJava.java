
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Sep 30 14:40:24 ART 2019
//----------------------------------------------------

package parserMiniJava;

import java_cup.runtime.*;
import miniJava.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Sep 30 14:40:24 ART 2019
  */
public class parserMiniJava extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parserMiniJava() {super();}

  /** Constructor which sets the default scanner. */
  public parserMiniJava(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserMiniJava(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\014\000\002\002\004\000\002\002\011\000\002\006" +
    "\003\000\002\004\006\000\002\004\005\000\002\004\015" +
    "\000\002\004\011\000\002\005\003\000\002\005\004\000" +
    "\002\003\003\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\004\013\006\001\002\000\004\002\054\001" +
    "\002\000\004\021\007\001\002\000\004\021\uffff\001\002" +
    "\000\004\005\010\001\002\000\004\006\011\001\002\000" +
    "\004\007\012\001\002\000\012\014\015\015\020\017\017" +
    "\021\013\001\002\000\004\012\051\001\002\000\004\010" +
    "\050\001\002\000\006\020\023\021\022\001\002\000\014" +
    "\010\ufffa\014\015\015\020\017\017\021\013\001\002\000" +
    "\004\005\037\001\002\000\004\005\021\001\002\000\006" +
    "\020\023\021\022\001\002\000\010\004\ufff8\006\ufff8\011" +
    "\ufff8\001\002\000\010\004\ufff7\006\ufff7\011\ufff7\001\002" +
    "\000\006\004\026\006\025\001\002\000\004\007\030\001" +
    "\002\000\006\020\023\021\022\001\002\000\010\004\ufff6" +
    "\006\ufff6\011\ufff6\001\002\000\012\014\015\015\020\017" +
    "\017\021\013\001\002\000\004\010\032\001\002\000\004" +
    "\016\033\001\002\000\004\007\034\001\002\000\012\014" +
    "\015\015\020\017\017\021\013\001\002\000\004\010\036" +
    "\001\002\000\014\010\ufffc\014\ufffc\015\ufffc\017\ufffc\021" +
    "\ufffc\001\002\000\006\020\023\021\022\001\002\000\006" +
    "\004\026\006\041\001\002\000\004\007\042\001\002\000" +
    "\012\014\015\015\020\017\017\021\013\001\002\000\004" +
    "\010\044\001\002\000\014\010\ufffb\014\ufffb\015\ufffb\017" +
    "\ufffb\021\ufffb\001\002\000\004\010\ufff9\001\002\000\006" +
    "\004\026\011\047\001\002\000\014\010\ufffd\014\ufffd\015" +
    "\ufffd\017\ufffd\021\ufffd\001\002\000\004\002\000\001\002" +
    "\000\006\020\023\021\022\001\002\000\006\004\026\011" +
    "\053\001\002\000\014\010\ufffe\014\ufffe\015\ufffe\017\ufffe" +
    "\021\ufffe\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\052\000\006\002\003\006\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\015\005" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\045\001\001\000\006\004\015\005\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\026\001\001\000\002\001\001" +
    "\000\006\004\015\005\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\015\005\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\003" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\015\005\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\003\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserMiniJava$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserMiniJava$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserMiniJava$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	
    public void syntax_error(Symbol s){
        System.err.println("\n\nSyntax Error - line: " +  (s.left+1) +  " - value:" + s.value);
        
    }


    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {    
         System.err.println("\n\nUnrecovered Syntax error line: " +  (s.left+1) +  " - value:" + s.value);
    }
                                 	

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parserMiniJava$actions {
  private final parserMiniJava parser;

  /** Constructor */
  CUP$parserMiniJava$actions(parserMiniJava parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parserMiniJava$do_action(
    int                        CUP$parserMiniJava$act_num,
    java_cup.runtime.lr_parser CUP$parserMiniJava$parser,
    java.util.Stack            CUP$parserMiniJava$stack,
    int                        CUP$parserMiniJava$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserMiniJava$result;

      /* select the action based on the action number */
      switch (CUP$parserMiniJava$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // exp ::= exp PLUS exp 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.peek()).value;
		 Expression e = new Add(e1,e2); 
                        RESULT = e;
                     
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-2)), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // exp ::= INTEGER 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.peek()).value;
		 Expression e = new IntLiteral(i); 
                        RESULT = e;
                     
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // exp ::= ID 
            {
              Expression RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.peek()).value;
		 Expression e = new Var(v);
                RESULT = e; 
              
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("exp",1, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statements ::= statement statements 
            {
              LinkedList<Statement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).value;
		int listStatementsleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).left;
		int listStatementsright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).right;
		LinkedList<Statement> listStatements = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.peek()).value;
		 listStatements.add(stmt);
                                        RESULT = listStatements;
                                    
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // statements ::= statement 
            {
              LinkedList<Statement> RESULT =null;
		int stmtleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).left;
		int stmtright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()).right;
		Statement stmt = (Statement)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.peek()).value;
		 LinkedList<Statement> listStatements = new LinkedList<Statement>();
                                  listStatements.add(stmt);
                                  RESULT = listStatements;
                              
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("statements",3, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // statement ::= WHILE LPARENT exp RPARENT LBRACE statements RBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-4)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-4)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).right;
		LinkedList<Statement> stmts = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).value;
		 Statement s = new Iterative(e,stmts);
                                  RESULT = s;
                                
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-6)), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // statement ::= IF LPARENT exp RPARENT LBRACE statements RBRACE ELSE LBRACE statements RBRACE 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-8)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-8)).value;
		int stmtsThenleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-5)).left;
		int stmtsThenright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-5)).right;
		LinkedList<Statement> stmtsThen = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-5)).value;
		int stmtsElseleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).left;
		int stmtsElseright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).right;
		LinkedList<Statement> stmtsElse = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).value;
		 Statement s = new Conditional(e,stmtsThen,stmtsElse);
                                  RESULT = s;
                                
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-10)), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // statement ::= RETURN exp SEMICOLON 
            {
              Statement RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).value;
		 Statement s = new Return(e);
                                  RESULT = s;
                                
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-2)), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // statement ::= ID EQUAL exp SEMICOLON 
            {
              Statement RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-3)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).value;
		 Statement s = new Assign(v,e);
                                  RESULT = s;
                                
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("statement",2, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-3)), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= INT 
            {
              Type RESULT =null;

              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("type",4, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= type ID LPARENT RPARENT LBRACE statements RBRACE 
            {
              Program RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-6)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-6)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-5)).value;
		int stmtsleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).left;
		int stmtsright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).right;
		LinkedList<Statement> stmts = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).value;
		 Program p = new Program(t,name,stmts);
                                              RESULT = p; 
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-6)), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          return CUP$parserMiniJava$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)).value;
		RESULT = start_val;
              CUP$parserMiniJava$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.elementAt(CUP$parserMiniJava$top-1)), ((java_cup.runtime.Symbol)CUP$parserMiniJava$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserMiniJava$parser.done_parsing();
          return CUP$parserMiniJava$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

